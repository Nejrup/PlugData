#N canvas 528 56 564 582 10;
#X obj 4 265 cnv 3 550 3 empty empty inlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 417 cnv 3 550 3 empty empty outlets 8 12 0 13 #dcdcdc #000000
0;
#X obj 4 505 cnv 3 550 3 empty empty arguments 8 12 0 13 #dcdcdc #000000
0;
#X obj 99 272 cnv 17 3 117 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 98 426 cnv 17 3 17 empty empty 0 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 99 395 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 98 447 cnv 17 3 17 empty empty 1 5 9 0 16 #dcdcdc #9c9c9c 0
;
#X obj 4 554 cnv 1 550 1 empty empty empty 0 0 0 4 #fcfcfc #fcfcfc
0;
#X obj 4 553 cnv 15 552 21 empty empty empty 20 12 0 14 #e0e0e0 #202020
0;
#X text 153 272 bang;
#X text 147 396 float;
#X text 154 447 bang;
#X text 147 427 float;
#X obj 212 151 bng 20 250 50 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040
#000000;
#X floatatom 299 181 5 0 0 0 - - - 0;
#X text 164 228 random numbers, f 7;
#X obj 299 233 bng 18 250 50 0 empty empty empty 0 -6 0 8 #d0d0d0 #404040
#000000;
#X msg 250 156 restart;
#X text 135 359 restart;
#X obj 306 9 cnv 15 250 40 empty empty empty 12 13 0 18 #7c7c7c #e0e4dc
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 305 8 pd;
#X obj 345 16 cnv 10 10 10 empty empty ELSE 0 15 2 30 #7c7c7c #e0e4dc
0;
#X obj 458 16 cnv 10 10 10 empty empty EL 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 478 16 cnv 10 10 10 empty empty Locus 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 515 17 cnv 10 10 10 empty empty Solus' 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 464 31 cnv 10 10 10 empty empty ELSE 0 6 2 13 #7c7c7c #e0e4dc
0;
#X obj 502 31 cnv 10 10 10 empty empty library 0 6 2 13 #7c7c7c #e0e4dc
0;
#X text 332 180 'n';
#X obj 114 45 cnv 4 4 4 empty empty random 0 28 2 18 #e0e0e0 #000000
0;
#X obj 183 45 cnv 4 4 4 empty empty sequences 0 28 2 18 #e0e0e0 #000000
0;
#X obj 212 231 else/display 3;
#X text 319 235 finished;
#X text 188 427 - random output, f 38;
#X text 132 513 1) float - sets size (default 1), f 65;
#X text 188 272 - generates a randm output, f 53;
#X text 123 373 n <float>;
#X text 188 373 - clears the memory and sets a new 'n' size, f 53
;
#X text 188 396 - clears the memory and sets a new 'n' size, f 53
;
#X text 132 531 2) list;
#X text 186 531 - sets number of occurrences for each element (default
1);
#X text 117 300 eq <float>;
#X text 188 300 - sets an equal number of occurrences for all elements
;
#X text 111 314 inc <float>;
#X text 188 314 - increase by 1 the occurrence of an element, f 53
;
#X text 153 286 list;
#X text 188 286 - sets number of occurrences for each element, f 53
;
#X text 117 329 set <f \, f>;
#X text 188 329 - sets element and occurrence, f 53;
#X obj 212 201 else/rand.seq 5;
#X text 64 89 [rand.seq] generates a sequence of random integer numbers
in a range defined by the 'n' size (from 0 to n-1). You can set how
many times an integer is output \, the default is once \, where it
generates an unrepeated random sequence., f 69;
#X text 188 359 - clears memory and restarts a new series, f 53;
#X text 188 447 - right after the sequence finishes;
#N canvas 663 177 665 377 example 0;
#X obj 505 244 bng 15 250 50 0 empty empty empty 17 7 0 10 #fcfcfc
#000000 #000000;
#X obj 430 184 until;
#X obj 430 155 bng 15 250 50 0 empty empty empty 17 7 0 10 #dcdcdc
#000000 #000000;
#X floatatom 505 184 5 0 12 0 - - - 0;
#X obj 430 298 else/display;
#X obj 83 134 tabread notes;
#X floatatom 83 110 3 0 0 0 - - - 0;
#X obj 142 207 array set notes;
#X obj 207 164 table notes 5;
#X obj 83 193 mtof;
#X obj 230 113 bng 19 250 50 0 empty empty empty 17 7 0 10 #dcdcdc
#000000 #000000;
#X msg 142 187 30 34 39 41 46;
#X obj 83 278 else/out~;
#X obj 83 159 else/display;
#X obj 83 87 else/rand.seq 5 4 1 3 2 1;
#X obj 142 164 loadbang;
#X text 79 20 play random notes with different weights., f 23;
#X text 450 154 generate a random series;
#X obj 83 57 else/tempo 120 50 -on;
#X obj 83 219 t b f;
#X obj 83 251 else/pluck~ 0 3000;
#X obj 430 271 else/group;
#X msg 369 155 seed 123;
#X msg 324 155 seed;
#X obj 430 210 else/rand.seq -seed 123 12, f 13;
#X text 303 44 The example below generates a dodecaphonic series. By
default \, [rand.seq] loads a unique seed value based on system every
time you open the patch. Each copy of the object has its own unique
seed. You can set a specific seed that reproduces the same sequence
with the 'seed' message or flag \, which can be any integer number.
A 'seed' message without a float resets the seed to a unique value
based on the system time., f 53;
#X connect 1 0 24 0;
#X connect 2 0 1 0;
#X connect 3 0 24 1;
#X connect 5 0 13 0;
#X connect 6 0 5 0;
#X connect 9 0 19 0;
#X connect 11 0 7 0;
#X connect 13 0 9 0;
#X connect 14 0 6 0;
#X connect 14 1 10 0;
#X connect 15 0 11 0;
#X connect 18 0 14 0;
#X connect 19 0 20 0;
#X connect 19 1 20 1;
#X connect 20 0 12 0;
#X connect 21 0 4 0;
#X connect 22 0 24 0;
#X connect 23 0 24 0;
#X connect 24 0 21 0;
#X connect 24 1 0 0;
#X connect 24 1 1 1;
#X connect 24 1 21 0;
#X restore 465 225 pd example;
#X obj 34 45 cnv 4 4 4 empty empty Weighted 0 28 2 18 #e0e0e0 #000000
0;
#X obj 3 8 cnv 15 301 42 empty empty rand.seq 20 20 2 37 #e0e0e0 #000000
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 302 42 1 0 0;
#X restore 3 8 graph;
#X msg 133 163 seed 123;
#X text 129 344 seed <f>;
#X text 188 344 - sets seed value \, no float creates a new unique
one, f 53;
#X obj 4 470 cnv 3 550 3 empty empty flags 8 12 0 13 #dcdcdc #000000
0;
#X text 120 481 -seed <float>: sets seed value (default \, unique one).
;
#X connect 13 0 48 0;
#X connect 14 0 48 1;
#X connect 17 0 48 0;
#X connect 48 0 30 0;
#X connect 48 1 16 0;
#X connect 56 0 48 0;
