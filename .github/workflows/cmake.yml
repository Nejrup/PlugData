name: CMake

on: [push, workflow_dispatch]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  macos-universal-build:
    runs-on: macos-10.15

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -G "Xcode"

#    - name: Import Code-Signing Certificates
#      uses: Apple-Actions/import-codesign-certs@v1
#      with:
        # The certificates in a PKCS12 file encoded as a base64 string
#        p12-file-base64: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_P12_BASE64 }}
        # The password used to import the PKCS12 file.
#        p12-password: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}

#    - name: Install gon via HomeBrew for code signing and app notarization
#      run: |
#        brew tap mitchellh/gon
#        brew install mitchellh/gon/gon

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

#    - name: Code-sign executable
#      env:
#        AC_USERNAME: ${{ secrets.AC_USERNAME }}
#        AC_PASSWORD: ${{ secrets.APPLE_DEVELOPER_CERTIFICATE_PASSWORD }}
#      run: |
#        gon -log-level=debug -log-json .github/scripts/gon_regular.json
#        gon -log-level=debug -log-json .github/scripts/gon_fx.json
#        gon -log-level=debug -log-json .github/scripts/gon_midi.json

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./.github/scripts/package.sh MacOS-Universal

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-MacOS-Universal
        path: PlugData-MacOS-Universal.zip

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-MacOS-Universal.zip

  windows-64-build:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -G "Visual Studio 16 2019" -A x64

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: cmd
      run: ./.github/scripts/package.bat Win64

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-Win64
        path: PlugData-Win64

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-Win64

  windows-32-build:
    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -G "Visual Studio 16 2019" -A Win32

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: cmd
      run: ./.github/scripts/package.bat Win32

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-Win32
        path: PlugData-Win32

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-Win32
        jobs:
  ubuntu-20_04-build:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Dependencies
      run: sudo apt -qq update && sudo apt install  -y libasound2-dev libjack-jackd2-dev libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -G "Unix Makefiles"

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./.github/scripts/package.sh Ubuntu-20.04-x64

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-Ubuntu-20.04-x64
        path: PlugData-Ubuntu-20.04-x64

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-Ubuntu-20.04-x64

  ubuntu-18_04-build:
    runs-on: ubuntu-18.04

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: Install Dependencies
      run: sudo apt -qq update && sudo apt install  -y libasound2-dev libjack-jackd2-dev libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake $GITHUB_WORKSPACE -G "Unix Makefiles"

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./.github/scripts/package.sh Ubuntu-18.04-x64

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-Ubuntu-18.04-x64
        path: PlugData-Ubuntu-18.04-x64

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-Ubuntu-18.04-x64
  fedora-build:
      runs-on: ubuntu-latest
      container: fedora:35
      steps:
      - name: Update git
        run: sudo dnf install -y git
      - uses: actions/checkout@v2
        with:
          submodules: recursive
        env:
          PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
      - name: Install Dependencies
        run: sudo dnf install -y cmake alsa-lib-devel libXinerama-devel freetype-devel libcurl-devel gcc-c++ libXcomposite-devel freeglut-devel libXrandr-devel libXcursor-devel
      - name: Build
        shell: bash
        run: mkdir build && cd build && cmake ..  -G "Unix Makefiles" && cmake --build . --config $BUILD_TYPE

      - name: Prepare Artefacts
        working-directory: ${{github.workspace}}
        shell: bash
        run: ./.github/scripts/package.sh Fedora-35-x64

      - name: Archive Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: PlugData-Fedora-35-x64
          path: PlugData-Fedora-35-x64

      - name: Release Artifacts
        uses: softprops/action-gh-release@v1
        if: startsWith(github.ref, 'refs/tags/')
        with:
          prerelease: true
          draft: true
          files: PlugData-Fedora-35-x64
  arch-build:
    runs-on: ubuntu-latest
    container:
      image: archlinux
      options: --privileged
      volumes:
        - /sys/fs/cgroup:/sys/fs/cgroup
    steps:
    - name: Update git
      run: pacman -Sy && pacman -S --noconfirm git
    - uses: actions/checkout@v2
      with:
        submodules: recursive
      env:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    - name: Install Dependencies
      run: pacman -S --noconfirm alsa-lib freetype2 libx11 libxcursor libxext libxinerama libxrandr libxrender webkit2gtk cmake make gcc clang libc++ pkgconf

    - name: Build
      shell: bash
      run: mkdir build && cd build && CC=clang CXX=clang++ cmake ..  -G "Unix Makefiles" && cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./.github/scripts/package.sh Arch-x64

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-Arch-x64
        path: PlugData-Arch-x64

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-Arch-x64
  opensuse-build:
    runs-on: ubuntu-latest
    container:
      image: opensuse/tumbleweed
      options: --privileged
      volumes:
        - /sys/fs/cgroup:/sys/fs/cgroup
    steps:
    - name: Update git
      run: zypper refresh && zypper install -y git
    - uses: actions/checkout@v2
      with:
        submodules: recursive
      env:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    - name: Install Dependencies
      run: zypper install -y cmake alsa-lib-devel libXinerama-devel freetype-devel libcurl-devel gcc-c++ libXcomposite-devel freeglut-devel libXrandr-devel libXcursor-devel clang

    - name: Build
      shell: bash
      run: mkdir build && cd build && CC=clang CXX=clang++ cmake ..  -G "Unix Makefiles" && cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./.github/scripts/package.sh OpenSUSE-x64

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-OpenSUSE-x64
        path: PlugData-OpenSUSE-x64

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-OpenSUSE-x64
  debian-build:
    runs-on: ubuntu-latest
    container:
      image: debian
      options: --privileged
      volumes:
        - /sys/fs/cgroup:/sys/fs/cgroup
    steps:
    - name: Update git
      run: apt -qq update && apt install -y git

    - uses: actions/checkout@v2
      with:
        submodules: recursive
      env:
        PATH: /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

    - name: Install Dependencies
      run: apt install -y libasound2-dev libjack-jackd2-dev libcurl4-openssl-dev libfreetype6-dev libx11-dev libxcomposite-dev libxcursor-dev libxcursor-dev libxext-dev libxinerama-dev libxrandr-dev libxrender-dev libwebkit2gtk-4.0-dev libglu1-mesa-dev mesa-common-dev cmake make gcc g++

    - name: Build
      shell: bash
      run: mkdir build && cd build && CXX=g++ cmake ..  -G "Unix Makefiles" && cmake --build . --config $BUILD_TYPE

    - name: Prepare Artefacts
      working-directory: ${{github.workspace}}
      shell: bash
      run: ./.github/scripts/package.sh Debian-x64

    - name: Archive Artifacts
      uses: actions/upload-artifact@v2
      with:
        name: PlugData-Debian-x64
        path: PlugData-Debian-x64

    - name: Release Artifacts
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      with:
        prerelease: true
        draft: true
        files: PlugData-Debian-x64
